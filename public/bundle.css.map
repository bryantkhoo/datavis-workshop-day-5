{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "AxisHorizontal.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as d3 from \"d3\";\n\timport AxisHorizontal from \"./AxisHorizontal.svelte\";\n\n\t// access data\n\tlet data = [];\n\td3.csv(\n\t  \"https://raw.githubusercontent.com/bryantkhoo/datavis-workshop-day-5/main/data/500_most_rated_books.csv\"\n\t).then(res => {\n\t  data = res.slice(0, 500);\n\t});\n\n\tconst xAccessor = d => parseFloat(d[\"average_rating\"]);\n\tconst sizeAccessor = d => parseInt(d[\"ratings_count\"]);\n\n\tlet xMetric = \"Rating\";\n\n\t// create chart dimensions\n\tlet margin = {\n\t  left: 30,\n\t  top: 0,\n\t  right: 0,\n\t  bottom: 30\n\t};\n\tlet width = 400;\n\tlet height = 600;\n\t$: boundsWidth = width - margin.left - margin.right;\n\t$: boundsHeight = height - margin.top - margin.bottom;\n\n\t// create scales\n\t$: xScale = d3\n\t  .scaleLinear()\n\t  .domain(d3.extent(data, xAccessor))\n\t  .range([0, boundsWidth]);\n\n\t$: sizeScale = d3\n\t  .scaleLinear()\n\t  .domain(d3.extent(data, sizeAccessor))\n\t  .range([5, 50]);\n\n\t$: nodes = data.map(d => {\n\t  return {\n\t    data: d,\n\t    x: xScale(xAccessor(d)),\n\t    y: boundsHeight / 2,\n\t    r: sizeScale(sizeAccessor(d))\n\t  };\n\t});\n\n\t$: newNodes = [...nodes];\n\n\t$: d3.forceSimulation(nodes)\n\t  .force(\"collide\", d3.forceCollide().radius(d => d.r + 1))\n\t  .on(\"tick\", () => {\n\t    nodes = [...nodes];\n\t  });\n</script>\n\n<h2>500 of the most rated books on Goodreads</h2>\n\n<figure>\n  <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\n    <svg width={width} height={height}>\n      <g transform=\"translate({margin.left}, {margin.top})\">\n        {#each newNodes as d}\n          <circle\n            cx={d.x}\n\t\t\tcy={d.y}\n            r={d.r}\n            fill=\"#7897AB\"\n          />\n        {/each}\n\n      </g>\n      <g transform=\"translate({margin.left}, {boundsHeight + margin.top })\">\n        <AxisHorizontal\n          scale={xScale}\n          count=\"5\"\n        />\n      </g>\n    </svg>\n    <div\n      class=\"label\"\n      style=\"transform: translate({boundsWidth}px, {boundsHeight + margin.top + 30}px)\">\n      {xMetric}\n    </div>\n  </div>\n</figure>\n\n<style>\n\t.wrapper {\n\t  position: relative;\n\t  margin: 0;\n\t  font-family: sans-serif;\n\t  width: 100%;\n\t  height: 600px;\n\t  min-width: 0;\n\t}\n\n\tsvg {\n\t  overflow: visible;\n\t}\n\n\th2 {\n\t  text-align: center;\n\t  font-family: sans-serif;\n\t}\n\n\t.label {\n\t  position: absolute;\n\t  top: 0;\n\t  left: 0;\n\t  max-width: 4em;\n\t  font-size: 0.6em;\n\t}\n</style>",
    "<script>\n  export let scale;\n  export let count;\n\n  $: ticks = scale.ticks(count);\n</script>\n\n<line\n  x1={scale.range()[1]}\n  stroke=\"black\"\n/>\n{#each ticks as x, i}\n  <g transform=\"translate({scale(x)}, 0)\">\n    <text\n      y=\"10\"\n      text-anchor=\"middle\"\n      dominant-baseline=\"hanging\">\n      {x}\n    </text>\n    <line\n      y1=\"5\"\n      stroke=\"black\"\n    />\n  </g>\n{/each}\n\n<style>\n\ttext {\n\t  font-size: 0.8em;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AA0FC,QAAQ,cAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,UAAU,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,SAAS,CAAE,CAAC,AACd,CAAC,AAED,GAAG,cAAC,CAAC,AACH,QAAQ,CAAE,OAAO,AACnB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,UAAU,AACzB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,KAAK,AAClB,CAAC;ACvFD,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,KAAK,AAClB,CAAC"
}